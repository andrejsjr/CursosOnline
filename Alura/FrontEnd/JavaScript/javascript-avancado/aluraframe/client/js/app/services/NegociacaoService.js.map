{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","todasAsNegociacoes","reduce","todasAsNegociacoesAchatadas","concat","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/semana')\r\n                .then(negociacoes => \r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });\r\n        });\r\n    }\r\n    \r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/anterior')\r\n                .then(negociacoes => \r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana anterior');\r\n                });\r\n        });\r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/retrasada')\r\n                .then(negociacoes => \r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(() => {\r\n                throw new Error('Não foi possível cadastrar a negociação');\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(() => {\r\n                throw new Error('Não foi possível listar as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(() => {\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()    \r\n        ])\r\n        .then(todasAsNegociacoes => \r\n            todasAsNegociacoes\r\n                .reduce((todasAsNegociacoesAchatadas, negociacoes) => \r\n                    todasAsNegociacoesAchatadas.concat(negociacoes), []))\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao => \r\n                !listaAtual.some(negociacaoExistente => \r\n                    negociacao.isEquals(negociacaoExistente))))\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n}"]}