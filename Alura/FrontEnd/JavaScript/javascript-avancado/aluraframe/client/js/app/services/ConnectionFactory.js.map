{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAIA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACTC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBZ,uCAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAFD;AAGH,yBAxBM,CAAP;AAyBH;;;kDAEoBpB,U,EAAY;AAC7BH,+BAAOwB,OAAP,CAAe,iBAAS;AACpB,gCAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACIxB,WAAWyB,iBAAX,CAA6BD,KAA7B;;AAEJxB,uCAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;;;sDAEwB;AACrB,4BAAI3B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["var stores = ['negociacoes'];\r\nvar version = 4;\r\nvar dbName = 'aluraframe';\r\nvar connection = null;\r\n\r\nvar close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Classe ConnectionFactory não pode ser instanciada');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            var openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result)\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n\r\n                    close = connection.close.bind(connection);\r\n                    \r\n                    connection.close = function() {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    }\r\n                }\r\n                \r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);                    \r\n                \r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}